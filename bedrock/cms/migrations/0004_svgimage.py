# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

# Generated by Django 4.2.20 on 2025-03-13 03:39

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

import taggit.managers
import wagtail.images.models
import wagtail.models.media
import wagtail.search.index


class Migration(migrations.Migration):
    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("wagtailcore", "0095_alter_page_title"),
        ("taggit", "0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx"),
        ("cms", "0003_bedrockimage_description"),
    ]

    operations = [
        migrations.CreateModel(
            name="SVGImage",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=255, verbose_name="title")),
                (
                    "file",
                    wagtail.images.models.WagtailImageField(
                        height_field="height", upload_to=wagtail.images.models.get_upload_to, verbose_name="file", width_field="width"
                    ),
                ),
                ("description", models.CharField(blank=True, default="", max_length=255, verbose_name="description")),
                ("width", models.IntegerField(editable=False, verbose_name="width")),
                ("height", models.IntegerField(editable=False, verbose_name="height")),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True, verbose_name="created at")),
                ("focal_point_x", models.PositiveIntegerField(blank=True, null=True)),
                ("focal_point_y", models.PositiveIntegerField(blank=True, null=True)),
                ("focal_point_width", models.PositiveIntegerField(blank=True, null=True)),
                ("focal_point_height", models.PositiveIntegerField(blank=True, null=True)),
                ("file_size", models.PositiveIntegerField(editable=False, null=True)),
                ("file_hash", models.CharField(blank=True, db_index=True, editable=False, max_length=40)),
                (
                    "collection",
                    models.ForeignKey(
                        default=wagtail.models.media.get_root_collection_id,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="wagtailcore.collection",
                        verbose_name="collection",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(blank=True, help_text=None, through="taggit.TaggedItem", to="taggit.Tag", verbose_name="tags"),
                ),
                (
                    "uploaded_by_user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="uploaded by user",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(wagtail.images.models.ImageFileMixin, wagtail.search.index.Indexed, models.Model),
        ),
    ]
