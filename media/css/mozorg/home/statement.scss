// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

@import '../../pebbles/includes/lib';

#promo-close {
    background: rgba(0, 0, 0, .2) url('/media/img/notification/close.svg') center center no-repeat;
    background-size: 20px 20px;
    border-radius: 50%;
    border: none;
    display: none;
    height: 35px;
    padding: 6px;
    position: absolute;
    right: 15px;
    top: 15px;
    transition: background-color 0.2s ease;
    width: 35px;

    &:focus,
    &:hover {
        background-color: rgba(0, 0, 0, .3);
        cursor: pointer;
    }

    // hide the 'Close' text
    span {
        @include visually-hidden;
    }

    // only display when JS is available
    .js & {
        display: block;
    }

    .var-a & {
        display: none;
    }
}

#promo-statement {
    background: #fff;
    color: #000;
    padding: 40px 20px;
    min-height: 100vh;

    .content-wrapper {
        @include font-size-level4;
        margin: 0 auto;
        margin-top: 20vh;
        max-width: 35ch;
        padding-top: 10px;
    }

    // hide by default if JS is available to avoid flicker
    // (if visitor previously dismissed)
    .js & {
        display: none;
    }

    h1,
    p {
        @include font-size-level4;
        font-family: Monaco, monospace;
        font-weight: normal;
        margin-bottom: 1.25em;
    }

    a {
        position: relative;
        display: inline-block;
        color: #00f;
        background-color: #fff;

        .var-a & {
            color: #000;
            text-decoration: none;

            &:hover {
                filter: invert(100);
            }
        }
    }

    &:before {
        @include background-size(100px, 32px);
        background: url('/media/img/pebbles/moz-wordmark-dark-reverse.svg') no-repeat;
        content: '';
        display: inline-block;
        height: 32px;
        left: 20px;
        position: absolute;
        top: 20px;
        width: 100px;

        .var-a & {
            display: none;
        }
    }
}

@keyframes underline {
    0% {
        color: #000;
        text-decoration: none;
    }
    1% {
        color: #00f;
        text-decoration: underline;
    }
}

/* with graditiude to http://lea.verou.me/2012/02/simpler-css-typing-animation-with-the-ch-unit/*/
$width: 35;
$text: #000;
$bg: #fff;
$cursor-speed: 30; // characters per second
$duration: $width / $cursor-speed * 1s;
$cursor-duration: $duration / $width;
$cursor-wait-duration: 1s;
$cursor-wait-iteration: 2;
$paragraph-lengths: (32, 34);

@keyframes letters {
    // animation, go from left to right
    from {
        left: 0;
    }
    to {
        left: $width + ch;
    }
}

@keyframes lines {
    // go from top to bottom
    from {
        top: 0;
    }
    to {
        top: 100%;
    }
}

@keyframes cursor-type {
    50% {
        border-color: #000;
    }
}

@keyframes cursor-wait {
    0% {
        box-shadow: inset 1px 0 0 0 rgba(0, 0, 0, 0);
    }
    1% {
        box-shadow: inset 1px 0 0 0 rgba(0, 0, 0, 1);
    }
    40% {
        box-shadow: inset 1px 0 0 0 rgba(0, 0, 0, 1);
    }
}

.type {
    position: relative;
    font-family: Consolas, Monaco, monospace; // must be monospace
    width: $width + ch;
    line-height: 1.2;
    word-break: break-all; // this has to be a predictable height and width to work
    overflow: hidden;

      // falls back to displaying static text
    @supports (width: 1ch) {
        &:before,
        &:after {
            box-sizing: border-box;
            content: '';
            position: absolute;
            z-index: 1;
            display: block;
            height: 1.2em;
            width: 100%;
            background-color: $bg;
        }

        &:before {
            // cursor and first line mask
            border-left: 1px solid transparent;
            top: 100%;
            animation-name: letters, lines, cursor-type, cursor-wait;
            animation-fill-mode: both, both, both, backwards;
        }

        &:after {
            // mask for subsequent lines
            content: '';
            height: 100%;
            top: 100%;
            left: 0;
            margin-top: 1.2em;
        }
    }
}


$iterations: 1;
$total-delay: 0s;

@each $length in $paragraph-lengths {
    $this-characters: $length;
    $this-lines: ceil($this-characters / $width);
    $this-selector: '.type';
    $this-delay: $total-delay;
    $this-type-delay: $this-delay + $cursor-wait-duration * $cursor-wait-iteration;

    @for $i from 1 to $iterations {
        $this-selector: $this-selector + ' + .type';
    }

    #{$this-selector} {
         &:before {
           animation-duration: $duration, ($duration * $this-lines), $cursor-duration, $cursor-wait-duration;
           animation-timing-function: steps($width, end), steps($this-lines, end), step-end, ease-out;
           animation-iteration-count: $this-lines, 1, $this-characters, $cursor-wait-iteration;
           animation-delay: $this-type-delay, $this-type-delay, $this-type-delay, $this-delay;
        }

        &:after {
            animation: lines ($duration * $this-lines) steps($this-lines, end) 1;
            animation-fill-mode: both;
            animation-delay: $this-type-delay;
        }
    }
    $total-delay: $this-type-delay + ($this-characters / $cursor-speed);
    $iterations: $iterations + 1;
}


#promo-statement {
    a {
        animation-name: underline;
        animation-duration: 1s;
        animation-timing-function: step-end;
        animation-delay: $total-delay;
        animation-iteration-count: 1;
        animation-fill-mode: forwards;
    }
}
