// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

@import
    'mixins/at2x',
    'mixins/gradients',
    'mixins/grid',
    'mixins/typography';


// Clear floats
@mixin clearfix {
    zoom: 1;

    &:after {
        clear: both;
        content: '';
        display: block;
        height: 0;
        visibility: hidden;
    }
}


// Mixins for CSS3 properties that still need prefixes in some browsers.
@mixin transition($transition...) {
    -webkit-transition: $transition;
            transition: $transition;
}

@mixin transform($transform...) {
    -webkit-transform: $transform;
            transform: $transform;
}

@mixin transform-origin($transform-origin...) {
    -webkit-transform-origin: $transform-origin;
            transform-origin: $transform-origin;
}

@mixin transform-style($transform-style...) {
    -webkit-transform-style: $transform-style;
            transform-style: $transform-style;
}

// Extra mixins for fine-tuned transitions
@mixin transition-property($transition-property...) {
    -webkit-transition-property: $transition-property;
            transition-property: $transition-property;
}

@mixin transition-duration($transition-duration...) {
    -webkit-transition-duration: $transition-duration;
            transition-duration: $transition-duration;
}

@mixin transition-timing-function($transition-timing-function...) {
    -webkit-transition-timing-function: $transition-timing-function;
            transition-timing-function: $transition-timing-function;
}

@mixin transition-delay($transition-delay...) {
    -webkit-transition-delay: $transition-delay;
            transition-delay: $transition-delay;
}

@mixin animation($parameters...) {
    -webkit-animation: $parameters;
            animation: $parameters;
}

@mixin border-box {
    -webkit-box-sizing: border-box;
       -moz-box-sizing: border-box;
            box-sizing: border-box;
}

@mixin flexbox {
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
}

@mixin flex($values: auto) {
    -webkit-box-flex: $values;
       -moz-box-flex: $values;
        -webkit-flex: $values;
                flex: $values;
}

@mixin flex-direction($value: column) {
    -webkit-box-direction: $value;
           flex-direction: $value;
}

@mixin flex-wrap($value: wrap) {
    -ms-flex-wrap: $value;
        flex-wrap: $value;
}

@mixin align-items($align: stretch) {
    -webkit-box-align: $align;
          align-items: $align;
}

@mixin justify-content($justify: flex-start) {
    -webkit-box-pack: $justify;
     justify-content: $justify;
}

@mixin background-size($sizes...) {
    -webkit-background-size: $sizes;
            background-size: $sizes;
}

@mixin box-decoration-break($value: slice) {
    -webkit-box-decoration-break: $value;
            box-decoration-break: $value;
}


// Hide an element visually, but not from screen readers
@mixin visually-hidden {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    /* !important required to ensure element is hidden when mixin is applied */
    position: absolute !important; /* stylelint-disable-line declaration-no-important */
    width: 1px;
}

// Hide an element completely, including from screen readers
@mixin hidden {
    display: none;
}

// Inline block hack for pages that still need to support old IE.
@mixin inline-block {
    display: inline-block;
    *display: inline;
    *zoom: 1;
}


// not the most up to date method, but works in IE7
@mixin image-replaced {
    overflow: hidden;
    text-indent: 120%; // extra 20% to account for fancy fonts that may overhang
    white-space: nowrap;
}


// Flip an element horizontally for RTL locales such as Arabic and Hebrew.
// Usually applied to pseudo-elements with a background-image, not for text.
@mixin flip-horizontally {
    @include transform(scale(-1, 1));
}


// Adds a right-pointing arrow after
@mixin trailing-arrow {
    &:after {
        content: "\00A0\25B8"; // space+triangle
        white-space: nowrap;
    }
}

// Adds a left-pointing arrow before
@mixin leading-arrow {
    &:before {
        content: "\25B8\00A0"; // triangle+space
        white-space: nowrap;
        @include transform(rotate(180deg));
    }
}

// Adds a right-pointing double-caret after
@mixin trailing-double-caret {
    &:after {
        content: "\00A0\00BB"; /* nbsp raquo */
        white-space: nowrap;
    }
}

// Adds a left-pointing double-caret before
@mixin leading-double-caret {
    &:before {
        content: "\00AB\00A0"; /* laquo nbsp */
        white-space: nowrap;
    }
}


// Multiple columns
@mixin multi-column($width: auto, $count: auto, $gap: normal) {
    -webkit-column-width: $width;
       -moz-column-width: $width;
            column-width: $width;
    -webkit-column-count: $count;
       -moz-column-count: $count;
            column-count: $count;
      -webkit-column-gap: $gap;
         -moz-column-gap: $gap;
              column-gap: $gap;
}

@mixin multi-column-clear {
    @include multi-column(auto, auto, normal);
}

@mixin multi-column-avoid-break {
    page-break-inside: avoid;
    -webkit-column-break-inside: avoid;
       -moz-column-break-inside: avoid;
                   break-inside: avoid;
}

// Preserve aspect ratio to prevent content jumping when media loads.
// Apply to a direct parent element of an image or video.
@mixin aspect-ratio($width, $height, $width-wrapper: 100%) {
    padding-bottom: ($height / $width) * $width-wrapper;
    position: relative;

    img,
    video,
    iframe,
    object,
    embed {
      bottom: 0;
      left: 0;
      position: absolute;
      right: 0;
      top: 0;
    }
}
